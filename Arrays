# Array LeetCode Solutions

This repository contains efficient and well-documented solutions to array-related problems on LeetCode. Each solution is implemented with a focus on clarity and optimized performance. 

## Features:
- 📂 Categorized solutions for easy navigation.  
- 📝 Detailed explanations and comments for better understanding.  
- 🚀 Includes various levels of difficulty: Easy, Medium, and Hard.  
- 🔍 Multiple approaches where applicable, including brute-force, optimized, and advanced techniques.  

Perfect for students, developers, and coding enthusiasts preparing for interviews or improving problem-solving skills.  

Problems:-

p1:- Two Sum--
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Solution--
class Solution {
    public int[] twoSum(int[] nums, int target) {
         int n = nums.length;
    int k = 0; 
    int temp1 = 0;
    int temp2 = 0;
    int nArr[] = new int[2];
    
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            k = nums[i]+nums[j];
            if(k == target){
                temp1 = i;
                temp2 = j;
            }
        }
    }
    
    for(int i=0;i<nArr.length;i++){
        for(int j=i+1;j<nArr.length;j++){
            nArr[i] = temp1;
            nArr[j] = temp2;
        }
    }
        return nArr;
  }
}

p2-- Move Zeroes

Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

Solution--

class Solution {
    public void moveZeroes(int[] nums) {
       
        int ptr = 0;

      
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                nums[ptr] = nums[i];
                ptr++;
            }
        }

  
        for (int i = ptr; i < nums.length; i++) {
            nums[i] = 0;
        }
    }
}

p3--  Plus One

You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

Solution--

class Solution {
    public int[] plusOne(int[] digits) {
       int n = digits.length;

        
        for (int i = n - 1; i >= 0; i--) {
            digits[i] += 1; 
            if (digits[i] < 10) {
                return digits; 
            }
            digits[i] = 0; 
        }

       
        int[] result = new int[n + 1];
        result[0] = 1; // Leading 1
        return result;
    
    }
}



